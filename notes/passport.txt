*app.js ---------------------------------------- 1 -------------------------------------
// Initialize Passport and restore authentication state, if any, from the
// session.
app.use(session({ 
  secret: 'my_precious',
  name: 'cookie_name',
  //store: sessionStore, // connect-mongo session store
  proxy: true,
  resave: true,
  saveUninitialized: true
}))
app.use(passport.initialize());
app.use(passport.session());

//*passport.js*//-----------------------------2-------------------------------
//
// serialize and deserialize
//
passport.serializeUser(function (user, done) {
  log('serializeUser: ' + user._id);
  done(null, user._id);
})

passport.deserializeUser(function (id, done) {
  User.findById(id, function (err, user) {
    log(user)
    if (!err) done(null, user)
    else done(err, null)
  });
})
// LocalStrategy
//
passport.use(new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password'
}, function (username, password, done) {
  User.findOne({ username: username }, function (err, user) { // request to data base
    return err
      ? done(err)
      : user
        ? password === user.password
          ? done(null, user)
          : done(null, false, { message: 'Incorrect password.' })
        : done(null, false, { message: 'Incorrect username.' });
  });
}));

local-strategy.js -------------------------------------3------------------------------

// Здесь мы проверяем, передаем данные о пользователе в функцию верификации, котоую мы определили выше. 
  // Вообще, passport.authenticate() вызывает метод req.logIn автоматически, здесь же я указал это явно. Это добавляет удобство в отладке. Например, можно вставить сюда console.log(), чтобы посмотреть, что происходит...
  // При удачной авторизации данные пользователя будут храниться в req.user

  login: (req, res, next) => {
    //req.body.password = hash(req.body.password)
    req.body.email = req.body.username;
    passport.authenticate('local',
      (err, user, info) => {
          console.log(err, user, info)
        return err
          ? next(err)
          : user
            ? req.logIn(user, (err) => {
              return err
                ? next(err)
                : res.json('ok');
            })
            : res.json('no');
      }
    )(req, res, next);
  },