#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

//const socket = require('../socket/socket');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);
/**
 * SSL for HTTPS, HTTP2
 */
const options = {
  key: fs.readFileSync(__dirname + '/keys/server.key'),
  cert: fs.readFileSync(__dirname + '/keys/server.crt')
}
/**
 * Create HTTPS server.
 */
https.createServer(options ,app).listen(443);
 
/**
 * Create HTTP server.
 */

var server = http.createServer(app);





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}









const Chat = require('../models/chat');
const Session = require('../models/session');

/**
 * Create socket server.
 */

const io = require('socket.io')(server);
//var socket = io('http://localhost:4200', {transports: ['websocket', 'polling', 'flashsocket']});

//io.set('origins', 'http://localhost:4200');
//io.origins("http://tonyjoss.com:3001")
// io.set("origins","http://tonyjoss.com:3001");
// io.set('transports', [
//   'websocket'
// , 'flashsocket'
// , 'htmlfile'
// , 'xhr-polling'
// , 'jsonp-polling'
// ]);
io.on('connection', (socket) => {
  console.log('socket connection');
  //socket.broadcast.emit('news', { 1 : 1 });
  socket.on('create', function (room) {
    socket.join(room);
  });
  socket.on('first-client-msg', async (msg)=>{
    createClientMsg(msg);
    console.log('1', msg)
    await Session.findOneAndUpdate({ fingerPrint: msg.session }, { userName: msg.userName });
  })
  socket.on('client-msg', (msg) => {
    createClientMsg(msg);
  })

  socket.on('manager-msg', (msg) => {
    //console.log(msg);
    const new_message = new Chat({
      text: msg.msg,
      session: msg.session,
      date: new Date(),
      role: 'manager',
      img: 'https://i.pinimg.com/originals/ac/b9/90/acb990190ca1ddbb9b20db303375bb58.jpg',
      isReadManager: true
    })
    new_message.save();
    socket.emit('message-finish', new_message);
    socket.to(msg.session).emit('message-finish', new_message)
  })


  socket.on('get-all-messages', async (session) => {
    //console.log('get-all-messages', session)
    socket.join(session);
    socket.emit('all-messages', await Chat.find({ session: session }))
  })

  socket.on('get-all-session', async () => {
    // console.log('get-all-session')
    socket.emit('all-session', await Session.find({}))
  })

  socket.on('remove-session', async (fingerPrint) => {
    await Session.findOneAndRemove({ fingerPrint });
    socket.emit('refresh-session-list');
  })

  socket.on('mark-as-red', async (msgIdList, session, role)=>{
    console.log('1', session)

    const promises = msgIdList.map( async (_id)=> await Chat.findByIdAndUpdate(
      { _id }, 
      (role == 'client') ? { isReadClient: true } : (role == 'manager') ? { isReadManager: true } : {} 
    ) );
    await Promise.all(promises);
    //socket.emit('all-messages', await Chat.find({ session: session }));
    socket.to(session).emit('all-messages', await Chat.find({ session }) );

  })

  socket.on('clear-messages', async (session)=>{
    console.log('1234')
    await Chat.deleteMany({ session })
    socket.emit('all-messages', await Chat.find({ session }));
  })

  socket.on('typing', (session, role)=>{
    console.log('typing', session, role)
    socket.to(session).emit('typing-from-back', role );
    //socket.emit('typing-from-back', role );
  })

  function createClientMsg(msg) {
    console.log('message from client', msg);
    const new_message = new Chat({
      userName: msg.userName,
      text: msg.msg,
      session: msg.session,
      date: new Date(),
      role: 'client',
      img: 'https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg',
      isReadClient: true
    })
    new_message.save();
    socket.emit('message-finish', new_message);
    socket.to(msg.session).emit('message-finish', new_message)
    console.log('new_message', new_message)
  }

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

module.exports = {};




