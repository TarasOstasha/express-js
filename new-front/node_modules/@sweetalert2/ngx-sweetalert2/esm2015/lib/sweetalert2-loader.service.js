/**
 * @fileoverview added by tsickle
 * Generated from: lib/sweetalert2-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { swalProviderToken } from './di';
export class SweetAlert2LoaderService {
    // Using any because Angular metadata generator does not understand a pure TS type here
    /**
     * @param {?} swalProvider
     */
    constructor(swalProvider) {
        this.swalProvider = swalProvider;
    }
    /**
     * @return {?}
     */
    get swal() {
        if (!this.swalPromiseCache) {
            this.preloadSweetAlertLibrary();
        }
        return (/** @type {?} */ (this.swalPromiseCache));
    }
    /**
     * @return {?}
     */
    preloadSweetAlertLibrary() {
        if (this.swalPromiseCache)
            return;
        /** @type {?} */
        const libPromise = isLoader(this.swalProvider)
            ? this.swalProvider()
            : Promise.resolve(this.swalProvider);
        this.swalPromiseCache = libPromise.then((/**
         * @param {?} value
         * @return {?}
         */
        value => isDefaultExport(value) ? value : value.default));
        /**
         * @param {?} value
         * @return {?}
         */
        function isLoader(value) {
            return typeof value === 'function' && ((/** @type {?} */ (value))).version === undefined;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function isDefaultExport(value) {
            return typeof value === 'function';
        }
    }
}
SweetAlert2LoaderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SweetAlert2LoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [swalProviderToken,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SweetAlert2LoaderService.prototype.swalProvider;
    /**
     * @type {?}
     * @private
     */
    SweetAlert2LoaderService.prototype.swalPromiseCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDItbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dlZXRhbGVydDIvbmd4LXN3ZWV0YWxlcnQyLyIsInNvdXJjZXMiOlsibGliL3N3ZWV0YWxlcnQyLWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBU3pDLE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBTWpDLFlBQThDLFlBQWlCO1FBQzNELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQ25DO1FBRUQsT0FBTyxtQkFBQSxJQUFJLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRU0sd0JBQXdCO1FBQzNCLElBQUksSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU87O2NBRTVCLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUMxQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRXhDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSTs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUMsQ0FBQzs7Ozs7UUFFakcsU0FBUyxRQUFRLENBQUMsS0FBbUI7WUFDakMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLElBQUksQ0FBQyxtQkFBQSxLQUFLLEVBQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7UUFDL0UsQ0FBQzs7Ozs7UUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFpQjtZQUN0QyxPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztRQUN2QyxDQUFDO0lBQ0wsQ0FBQzs7O1lBbkNKLFVBQVU7Ozs7NENBT2EsTUFBTSxTQUFDLGlCQUFpQjs7Ozs7OztJQUw1QyxnREFBNEM7Ozs7O0lBRTVDLG9EQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IFN3YWxEZWZhdWx0LCAqIGFzIFN3YWwgZnJvbSAnc3dlZXRhbGVydDInO1xuaW1wb3J0IHsgc3dhbFByb3ZpZGVyVG9rZW4gfSBmcm9tICcuL2RpJztcblxuZXhwb3J0IHR5cGUgU3dhbE1vZHVsZSA9IHR5cGVvZiBTd2FsRGVmYXVsdCB8IHR5cGVvZiBTd2FsO1xuXG5leHBvcnQgdHlwZSBTd2FsUHJvdmlkZXIgPSBTd2FsTW9kdWxlTG9hZGVyIHwgU3dhbE1vZHVsZTtcblxuZXhwb3J0IHR5cGUgU3dhbE1vZHVsZUxvYWRlciA9ICgpID0+IFByb21pc2U8U3dhbE1vZHVsZT47XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3dhbFByb3ZpZGVyOiBTd2FsUHJvdmlkZXI7XG5cbiAgICBwcml2YXRlIHN3YWxQcm9taXNlQ2FjaGU/OiBQcm9taXNlPHR5cGVvZiBTd2FsRGVmYXVsdD47XG5cbiAgICAvLyBVc2luZyBhbnkgYmVjYXVzZSBBbmd1bGFyIG1ldGFkYXRhIGdlbmVyYXRvciBkb2VzIG5vdCB1bmRlcnN0YW5kIGEgcHVyZSBUUyB0eXBlIGhlcmVcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoQEluamVjdChzd2FsUHJvdmlkZXJUb2tlbikgc3dhbFByb3ZpZGVyOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zd2FsUHJvdmlkZXIgPSBzd2FsUHJvdmlkZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzd2FsKCk6IFByb21pc2U8dHlwZW9mIFN3YWxEZWZhdWx0PiB7XG4gICAgICAgIGlmICghdGhpcy5zd2FsUHJvbWlzZUNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLnByZWxvYWRTd2VldEFsZXJ0TGlicmFyeSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3dhbFByb21pc2VDYWNoZSE7XG4gICAgfVxuXG4gICAgcHVibGljIHByZWxvYWRTd2VldEFsZXJ0TGlicmFyeSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3dhbFByb21pc2VDYWNoZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGxpYlByb21pc2UgPSBpc0xvYWRlcih0aGlzLnN3YWxQcm92aWRlcilcbiAgICAgICAgICAgID8gdGhpcy5zd2FsUHJvdmlkZXIoKVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUodGhpcy5zd2FsUHJvdmlkZXIpO1xuXG4gICAgICAgIHRoaXMuc3dhbFByb21pc2VDYWNoZSA9IGxpYlByb21pc2UudGhlbih2YWx1ZSA9PiBpc0RlZmF1bHRFeHBvcnQodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS5kZWZhdWx0KTtcblxuICAgICAgICBmdW5jdGlvbiBpc0xvYWRlcih2YWx1ZTogU3dhbFByb3ZpZGVyKTogdmFsdWUgaXMgU3dhbE1vZHVsZUxvYWRlciB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICh2YWx1ZSBhcyBhbnkpLnZlcnNpb24gPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGVmYXVsdEV4cG9ydCh2YWx1ZTogU3dhbE1vZHVsZSk6IHZhbHVlIGlzIHR5cGVvZiBTd2FsRGVmYXVsdCB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19