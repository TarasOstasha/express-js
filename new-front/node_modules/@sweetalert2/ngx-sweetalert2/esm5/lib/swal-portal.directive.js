/**
 * @fileoverview added by tsickle
 * Generated from: lib/swal-portal.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Directive, Host, Injector, Input, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SwalPortalTargets } from './swal-portal-targets.service';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalComponent } from './swal.component';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * A structural directive that lets you use Angular templates inside of SweetAlerts.
 * There are different targetable zones provided by {\@link SwalPortalTargets}: title, content, confirmButton, etc, but
 * you can also make your own target by implementing {\@link SwalPortalTarget} and giving it to this directive.
 * The default target is the alert text content zone.
 *
 * Usage in your component's TypeScript (if you use another target than {\@link SwalPortalTargets.content}):
 *
 * \@Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPortalTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPortal [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPortal="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
var SwalPortalDirective = /** @class */ (function () {
    function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
        this.destroyed = new Subject();
    }
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     */
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     * @return {?}
     */
    SwalPortalDirective.prototype.ngOnInit = /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     * @return {?}
     */
    function () {
        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.
        this.target = this.target || this.swalTargets.content;
        //=> Apply the options provided by the target definition
        void this.swalComponent.update(this.target.options);
        //=> Subscribe to a few hooks frm the parent SwalComponent.
        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));
        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));
        this.swalComponent.afterClose.pipe(takeUntil(this.destroyed)).subscribe(this.afterCloseHook.bind(this));
    };
    /**
     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     */
    /**
     * Signal any {\@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     * @return {?}
     */
    SwalPortalDirective.prototype.ngOnDestroy = /**
     * Signal any {\@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     * @return {?}
     */
    function () {
        this.destroyed.next();
    };
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     */
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {\@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.renderHook = /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {\@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var swal, targetEl;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //=> Ensure the portal component is created
                        if (!this.portalComponentRef) {
                            this.portalComponentRef = this.createPortalComponent();
                        }
                        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.
                        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside
                        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting
                        // the portal component is fully synchronous, causing no blinks in the modal contents.
                        return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        //=> Find target element
                        targetEl = (/** @type {?} */ (this.target)).element(swal);
                        //=> Replace target's contents with our component
                        // https://jsperf.com/innerhtml-vs-removechild/15
                        while (targetEl.firstChild) {
                            targetEl.removeChild(targetEl.firstChild);
                        }
                        targetEl.appendChild(this.portalComponentRef.location.nativeElement);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     */
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.beforeOpenHook = /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     * @private
     * @return {?}
     */
    function () {
        if (!this.portalComponentRef)
            return;
        //=> Make the Angular app aware of that detached view so rendering and change detection can happen
        this.app.attachView(this.portalComponentRef.hostView);
    };
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     */
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.afterCloseHook = /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     * @private
     * @return {?}
     */
    function () {
        if (!this.portalComponentRef)
            return;
        //=> Detach the portal component from the app and destroy it
        this.app.detachView(this.portalComponentRef.hostView);
        this.portalComponentRef.destroy();
        this.portalComponentRef = void 0;
    };
    /**
     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
     */
    /**
     * Creates the {\@link SwalPortalComponent} and gives it the customer's template ref.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.createPortalComponent = /**
     * Creates the {\@link SwalPortalComponent} and gives it the customer's template ref.
     * @private
     * @return {?}
     */
    function () {
        //=> Create the SwalPortalComponent that will hold our content
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(SwalPortalComponent);
        // Yes, we do not use the third argument that would directly use the target as the component's view
        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)
        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be
        // able to restore it at any moment, ie. after the modal has been re-rendered.
        /** @type {?} */
        var componentRef = factory.create(this.injector, []);
        //=> Apply the consumer's template on the component
        componentRef.instance.template = this.templateRef;
        return componentRef;
    };
    SwalPortalDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swalPortal]'
                },] }
    ];
    /** @nocollapse */
    SwalPortalDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: TemplateRef },
        { type: SweetAlert2LoaderService },
        { type: SwalPortalTargets },
        { type: SwalComponent, decorators: [{ type: Host }] }
    ]; };
    SwalPortalDirective.propDecorators = {
        target: [{ type: Input, args: ['swalPortal',] }]
    };
    return SwalPortalDirective;
}());
export { SwalPortalDirective };
if (false) {
    /**
     * Takes a portal target or nothing (then it will target the text content zone by default).
     *
     * See the {\@link SwalPortalTargets} service to see the available targets.
     * See the class doc block for more informations.
     * @type {?}
     */
    SwalPortalDirective.prototype.target;
    /**
     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.portalComponentRef;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.destroyed;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.app;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.sweetAlert2Loader;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.swalTargets;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.swalComponent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2FsLXBvcnRhbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNILGNBQWMsRUFBRSx3QkFBd0IsRUFBZ0IsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUN4RixXQUFXLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFvQixpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDeEU7SUFtQkksNkJBQ3FCLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLEdBQW1CLEVBQ25CLFdBQTZCLEVBQzdCLGlCQUEyQyxFQUMzQyxXQUE4QixFQUN0QixhQUE0QjtRQU5wQyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNsQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFFBQUcsR0FBSCxHQUFHLENBQWdCO1FBQ25CLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQTBCO1FBQzNDLGdCQUFXLEdBQVgsV0FBVyxDQUFtQjtRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVR4QyxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQVVq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QXVCLENBQUMsbUJBQW1CLENBQUM7Ozs7OztZQU1wRSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUV0RCxtREFBbUQ7UUFDbkQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUVsRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDOztnQkE1SEosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO2lCQUMzQjs7OztnQkExQ21CLHdCQUF3QjtnQkFBaUMsUUFBUTtnQkFBakYsY0FBYztnQkFDZCxXQUFXO2dCQU9OLHdCQUF3QjtnQkFITixpQkFBaUI7Z0JBRW5DLGFBQWEsdUJBMkRiLElBQUk7Ozt5QkFoQlIsS0FBSyxTQUFDLFlBQVk7O0lBbUh2QiwwQkFBQztDQUFBLEFBN0hELElBNkhDO1NBMUhZLG1CQUFtQjs7Ozs7Ozs7O0lBTzVCLHFDQUFzRDs7Ozs7O0lBS3RELGlEQUErRDs7Ozs7SUFFL0Qsd0NBQWlEOzs7OztJQUc3Qyx1Q0FBbUQ7Ozs7O0lBQ25ELHVDQUFtQzs7Ozs7SUFDbkMsa0NBQW9DOzs7OztJQUNwQywwQ0FBOEM7Ozs7O0lBQzlDLGdEQUE0RDs7Ozs7SUFDNUQsMENBQStDOzs7OztJQUMvQyw0Q0FBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBIb3N0LCBJbmplY3RvciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LFxuICAgIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3dhbFBvcnRhbFRhcmdldCwgU3dhbFBvcnRhbFRhcmdldHMgfSBmcm9tICcuL3N3YWwtcG9ydGFsLXRhcmdldHMuc2VydmljZSc7XG5pbXBvcnQgeyBTd2FsUG9ydGFsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLXBvcnRhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dhbENvbXBvbmVudCB9IGZyb20gJy4vc3dhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZSc7XG5cbi8qKlxuICogQSBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZSB0aGF0IGxldHMgeW91IHVzZSBBbmd1bGFyIHRlbXBsYXRlcyBpbnNpZGUgb2YgU3dlZXRBbGVydHMuXG4gKiBUaGVyZSBhcmUgZGlmZmVyZW50IHRhcmdldGFibGUgem9uZXMgcHJvdmlkZWQgYnkge0BsaW5rIFN3YWxQb3J0YWxUYXJnZXRzfTogdGl0bGUsIGNvbnRlbnQsIGNvbmZpcm1CdXR0b24sIGV0YywgYnV0XG4gKiB5b3UgY2FuIGFsc28gbWFrZSB5b3VyIG93biB0YXJnZXQgYnkgaW1wbGVtZW50aW5nIHtAbGluayBTd2FsUG9ydGFsVGFyZ2V0fSBhbmQgZ2l2aW5nIGl0IHRvIHRoaXMgZGlyZWN0aXZlLlxuICogVGhlIGRlZmF1bHQgdGFyZ2V0IGlzIHRoZSBhbGVydCB0ZXh0IGNvbnRlbnQgem9uZS5cbiAqXG4gKiBVc2FnZSBpbiB5b3VyIGNvbXBvbmVudCdzIFR5cGVTY3JpcHQgKGlmIHlvdSB1c2UgYW5vdGhlciB0YXJnZXQgdGhhbiB7QGxpbmsgU3dhbFBvcnRhbFRhcmdldHMuY29udGVudH0pOlxuICpcbiAqICAgICBAQ29tcG9uZW50KHsgLi4uIH0pXG4gKiAgICAgZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcbiAqICAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBzd2FsVGFyZ2V0czogU3dhbFBvcnRhbFRhcmdldHMpIHtcbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiBVc2FnZSBpbiB0aGUgdGVtcGxhdGU6XG4gKlxuICogICAgIDxzd2FsIHRpdGxlPVwiRmlsbCB0aGUgZm9ybVwiIChjb25maXJtKT1cImNvbmZpcm1IYW5kbGVyKClcIj5cbiAqICAgICAgICAgPCEtLSBUaGlzIGZvcm0gd2lsbCBiZSBkaXNwbGF5ZWQgYXMgdGhlIGFsZXJ0IG1haW4gY29udGVudFxuICogICAgICAgICAgICAgIFRhcmdldHMgdGhlIGFsZXJ0J3MgbWFpbiBjb250ZW50IHpvbmUgYnkgZGVmYXVsdCAtLT5cbiAqICAgICAgICAgPGZvcm0gKnN3YWxQb3J0YWwgW2Zvcm1Db250cm9sXT1cIm15Rm9ybVwiPlxuICogICAgICAgICAgICAgLi4uXG4gKiAgICAgICAgIDwvZm9ybT5cbiAqXG4gKiAgICAgICAgIDwhLS0gVGhpcyB0YXJnZXRzIHRoZSBjb25maXJtIGJ1dHRvbidzIGlubmVyIGNvbnRlbnRcbiAqICAgICAgICAgICAgICBOb3RpY2UgdGhlIHVzYWdlIG9mIG5nLWNvbnRhaW5lciB0byBhdm9pZCBjcmVhdGluZyBhbiB1c2VsZXNzIERPTSBlbGVtZW50IGluc2lkZSB0aGUgYnV0dG9uIC0tPlxuICogICAgICAgICA8bmctY29udGFpbmVyICpzd2FsUG9ydGFsPVwic3dhbFRhcmdldHMuY29uZmlybUJ1dHRvblwiPlxuICogICAgICAgICAgICAgIFNlbmQgKHt7IHNlY29uZHNMZWZ0IH19IHNlY29uZHMgbGVmdClcbiAqICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gKiAgICAgPHN3YWw+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3N3YWxQb3J0YWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBTd2FsUG9ydGFsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIC8qKlxuICAgICAqIFRha2VzIGEgcG9ydGFsIHRhcmdldCBvciBub3RoaW5nICh0aGVuIGl0IHdpbGwgdGFyZ2V0IHRoZSB0ZXh0IGNvbnRlbnQgem9uZSBieSBkZWZhdWx0KS5cbiAgICAgKlxuICAgICAqIFNlZSB0aGUge0BsaW5rIFN3YWxQb3J0YWxUYXJnZXRzfSBzZXJ2aWNlIHRvIHNlZSB0aGUgYXZhaWxhYmxlIHRhcmdldHMuXG4gICAgICogU2VlIHRoZSBjbGFzcyBkb2MgYmxvY2sgZm9yIG1vcmUgaW5mb3JtYXRpb25zLlxuICAgICAqL1xuICAgIEBJbnB1dCgnc3dhbFBvcnRhbCcpIHB1YmxpYyB0YXJnZXQ/OiBTd2FsUG9ydGFsVGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIGNvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhlIGNvbnRyb2xsZWQgU3dhbFBvcnRhbENvbXBvbmVudCB0byBkZXN0cm95IGl0IHdoZW4gbm8gbG9uZ2VyIG5lZWRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHBvcnRhbENvbXBvbmVudFJlZj86IENvbXBvbmVudFJlZjxTd2FsUG9ydGFsQ29tcG9uZW50PjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveWVkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBhcHA6IEFwcGxpY2F0aW9uUmVmLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN3ZWV0QWxlcnQyTG9hZGVyOiBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3dhbFRhcmdldHM6IFN3YWxQb3J0YWxUYXJnZXRzLFxuICAgICAgICBASG9zdCgpIHByaXZhdGUgcmVhZG9ubHkgc3dhbENvbXBvbmVudDogU3dhbENvbXBvbmVudCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gdGhlIHRoZSBTd2VldEFsZXJ0IGFwcGVhcmFuY2UvZGlzYXBwZWFyYW5jZSBldmVudHMgdG8gY3JlYXRlL2Rlc3Ryb3kgdGhlIFN3YWxQb3J0YWxDb21wb25lbnRcbiAgICAgKiB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgY29uc3VtZXIncyB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIC8vIENhbid0IGJlIHNldCBpbiBhIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUsIGlmIHRoZSBjdXN0b21lciBsZXRzICpzd2FsUG9ydGFsIGVtcHR5LCB0aGUgdmFsdWUgd2UgZ2V0IGlzIHVuZGVmLlxuICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0IHx8IHRoaXMuc3dhbFRhcmdldHMuY29udGVudDtcblxuICAgICAgICAvLz0+IEFwcGx5IHRoZSBvcHRpb25zIHByb3ZpZGVkIGJ5IHRoZSB0YXJnZXQgZGVmaW5pdGlvblxuICAgICAgICB2b2lkIHRoaXMuc3dhbENvbXBvbmVudC51cGRhdGUodGhpcy50YXJnZXQub3B0aW9ucyk7XG5cbiAgICAgICAgLy89PiBTdWJzY3JpYmUgdG8gYSBmZXcgaG9va3MgZnJtIHRoZSBwYXJlbnQgU3dhbENvbXBvbmVudC5cbiAgICAgICAgdGhpcy5zd2FsQ29tcG9uZW50LnJlbmRlci5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCkpLnN1YnNjcmliZSh0aGlzLnJlbmRlckhvb2suYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuc3dhbENvbXBvbmVudC5iZWZvcmVPcGVuLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKSkuc3Vic2NyaWJlKHRoaXMuYmVmb3JlT3Blbkhvb2suYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuc3dhbENvbXBvbmVudC5hZnRlckNsb3NlLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkKSkuc3Vic2NyaWJlKHRoaXMuYWZ0ZXJDbG9zZUhvb2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2lnbmFsIGFueSB7QGxpbmsgZGVzdHJveWVkfSBjb25zdW1lciB0aGF0IHRoaXMgaXMgb3Zlciwgc28gdGhleSBjYW4gdW5zdWJzY3JpYmUgZnJvbSB0aGVcbiAgICAgKiBwYXJlbnQgU3dhbENvbXBvbmVudCBldmVudHMuXG4gICAgICovXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZC5uZXh0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyByZW5kZXIgaG9vayBydW5zIDEuLm4gdGltZXMgKHBlciBtb2RhbCBpbnN0YW5jZSksIGp1c3QgYmVmb3JlIHRoZSBtb2RhbCBpcyBzaG93biAoYW5kIGFsc28gYmVmb3JlIHRoZVxuICAgICAqIHtAbGluayBiZWZvcmVPcGVuSG9va30pLCBvciBhZnRlciBTd2FsLnVwZGF0ZSgpIGlzIGNhbGxlZC5cbiAgICAgKiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byByZW5kZXIsIG9yIHJlLXJlbmRlciwgb3VyIHBvcnRhbCBjb250ZW50cy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHJlbmRlckhvb2soKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vPT4gRW5zdXJlIHRoZSBwb3J0YWwgY29tcG9uZW50IGlzIGNyZWF0ZWRcbiAgICAgICAgaWYgKCF0aGlzLnBvcnRhbENvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgdGhpcy5wb3J0YWxDb21wb25lbnRSZWYgPSB0aGlzLmNyZWF0ZVBvcnRhbENvbXBvbmVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy89PiBTd2VldEFsZXJ0MiBjcmVhdGVkIHRoZSBtb2RhbCBvciBqdXN0IGVyYXNlZCBhbGwgb2Ygb3VyIGNvbnRlbnQsIHNvIHdlIG5lZWQgdG8gaW5zdGFsbC9yZWluc3RhbGwgaXQuXG4gICAgICAgIC8vIFN3YWwudXBkYXRlKCkgaXMgc3luY2hyb25vdXMsIHRoaXMgb2JzZXJ2YWJsZSB0b28sIGFuZCBtb3VudENvbXBvbmVudE9uVGFyZ2V0IHRvbyAodGhlIHByb21pc2UgaW5zaWRlXG4gICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gaXMgYWxyZWFkeSByZXNvbHZlZCBhdCB0aGlzIHBvaW50KSwgc28gdGhlIHdob2xlIHByb2Nlc3Mgb2YgcmUtcmVuZGVyaW5nIGFuZCByZS1tb3VudGluZ1xuICAgICAgICAvLyB0aGUgcG9ydGFsIGNvbXBvbmVudCBpcyBmdWxseSBzeW5jaHJvbm91cywgY2F1c2luZyBubyBibGlua3MgaW4gdGhlIG1vZGFsIGNvbnRlbnRzLlxuICAgICAgICBjb25zdCBzd2FsID0gYXdhaXQgdGhpcy5zd2VldEFsZXJ0MkxvYWRlci5zd2FsO1xuXG4gICAgICAgIC8vPT4gRmluZCB0YXJnZXQgZWxlbWVudFxuICAgICAgICBjb25zdCB0YXJnZXRFbCA9IHRoaXMudGFyZ2V0IS5lbGVtZW50KHN3YWwpO1xuXG4gICAgICAgIC8vPT4gUmVwbGFjZSB0YXJnZXQncyBjb250ZW50cyB3aXRoIG91ciBjb21wb25lbnRcbiAgICAgICAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL2lubmVyaHRtbC12cy1yZW1vdmVjaGlsZC8xNVxuICAgICAgICB3aGlsZSAodGFyZ2V0RWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlQ2hpbGQodGFyZ2V0RWwuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRFbC5hcHBlbmRDaGlsZCh0aGlzLnBvcnRhbENvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJlZm9yZU9wZW4gaG9vayBydW5zIG9uY2UgKHBlciBtb2RhbCBpbnN0YW5jZSksIGp1c3QgYmVmb3JlIHRoZSBtb2RhbCBpcyBzaG93biBvbiB0aGUgc2NyZWVuLlxuICAgICAqIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIGRlY2xhcmUgb3VyIGRldGFjaGVkIHZpZXcgdG8gdGhlIEFuZ3VsYXIgYXBwLlxuICAgICAqL1xuICAgIHByaXZhdGUgYmVmb3JlT3Blbkhvb2soKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5wb3J0YWxDb21wb25lbnRSZWYpIHJldHVybjtcblxuICAgICAgICAvLz0+IE1ha2UgdGhlIEFuZ3VsYXIgYXBwIGF3YXJlIG9mIHRoYXQgZGV0YWNoZWQgdmlldyBzbyByZW5kZXJpbmcgYW5kIGNoYW5nZSBkZXRlY3Rpb24gY2FuIGhhcHBlblxuICAgICAgICB0aGlzLmFwcC5hdHRhY2hWaWV3KHRoaXMucG9ydGFsQ29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGFmdGVyQ2xvc2UgaG9vayBydW5zIG9uY2UgKHBlciBtb2RhbCBpbnN0YW5jZSksIGp1c3QgYWZ0ZXIgdGhlIG1vZGFsIGNsb3NpbmcgYW5pbWF0aW9uIHRlcm1pbmF0ZWQuXG4gICAgICogVGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gZGV0YWNoIGFuZCBkZXN0cm95IG91ciBjb250ZW50LCB0aGF0IGlzIG5vdCB2aXNpYmxlIGFueW1vcmUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBhZnRlckNsb3NlSG9vaygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnBvcnRhbENvbXBvbmVudFJlZikgcmV0dXJuO1xuXG4gICAgICAgIC8vPT4gRGV0YWNoIHRoZSBwb3J0YWwgY29tcG9uZW50IGZyb20gdGhlIGFwcCBhbmQgZGVzdHJveSBpdFxuICAgICAgICB0aGlzLmFwcC5kZXRhY2hWaWV3KHRoaXMucG9ydGFsQ29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgICAgdGhpcy5wb3J0YWxDb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBvcnRhbENvbXBvbmVudFJlZiA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSB7QGxpbmsgU3dhbFBvcnRhbENvbXBvbmVudH0gYW5kIGdpdmVzIGl0IHRoZSBjdXN0b21lcidzIHRlbXBsYXRlIHJlZi5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVBvcnRhbENvbXBvbmVudCgpOiBDb21wb25lbnRSZWY8U3dhbFBvcnRhbENvbXBvbmVudD4ge1xuICAgICAgICAvLz0+IENyZWF0ZSB0aGUgU3dhbFBvcnRhbENvbXBvbmVudCB0aGF0IHdpbGwgaG9sZCBvdXIgY29udGVudFxuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShTd2FsUG9ydGFsQ29tcG9uZW50KTtcblxuICAgICAgICAvLyBZZXMsIHdlIGRvIG5vdCB1c2UgdGhlIHRoaXJkIGFyZ3VtZW50IHRoYXQgd291bGQgZGlyZWN0bHkgdXNlIHRoZSB0YXJnZXQgYXMgdGhlIGNvbXBvbmVudCdzIHZpZXdcbiAgICAgICAgLy8gKHVuZm9ydHVuYXRlbHksIGJlY2F1c2UgdGhhdCB3b3VsZCBnaXZlIGEgY2xlYW5lciBET00gYW5kIHdvdWxkIGF2b2lkIGRpcnR5IGFuZCBkaXJlY3QgRE9NIG1hbmlwdWxhdGlvbnMpXG4gICAgICAgIC8vIFRoYXQncyBiZWNhdXNlIHdlIHdhbnQgdG8ga2VlcCBvdXIgY29tcG9uZW50IHNhZmUgZnJvbSBTd2VldEFsZXJ0MidzIG9wZXJhdGlvbnMgb24gdGhlIERPTSwgYW5kIHRvIGJlXG4gICAgICAgIC8vIGFibGUgdG8gcmVzdG9yZSBpdCBhdCBhbnkgbW9tZW50LCBpZS4gYWZ0ZXIgdGhlIG1vZGFsIGhhcyBiZWVuIHJlLXJlbmRlcmVkLlxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSBmYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yLCBbXSk7XG5cbiAgICAgICAgLy89PiBBcHBseSB0aGUgY29uc3VtZXIncyB0ZW1wbGF0ZSBvbiB0aGUgY29tcG9uZW50XG4gICAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVSZWY7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcbiAgICB9XG59XG4iXX0=