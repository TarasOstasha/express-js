import { Directive, ElementRef, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * # Ways to turn off autofocus: any js-falsely value, except empty string
 *
 *     <!-- with data binding -->
 *     <input [autofocus]=""> <!-- undefined value -->
 *     <input [autofocus]="undefined">
 *     <input [autofocus]="false">
 *     <input [autofocus]="null">
 *     <input [autofocus]="0">
 *
 *     <!-- without data binding -->
 *     <input autofocus="undefined">
 *     <input autofocus="false">
 *     <input autofocus="null">
 *     <input autofocus="0">
 *
 *     <input> <!-- disabled by default -->
 *
 *
 * # Ways to enable autofocus: any js-true value and empty string
 *
 *
 *     <!-- empty string will enable autofocus, this is default html behavior -->
 *     <input [autofocus]="''">
 *     <input autofocus="">
 *     <input autofocus>
 *
 *     <input [autofocus]="true">
 *     <input autofocus="true">
 *
 *     <input [autofocus]="'any other values'">
 *
 */
var AutofocusDirective = (function () {
    /**
     * @param {?} el
     */
    function AutofocusDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    AutofocusDirective.prototype.ngAfterViewInit = function () {
        if (this._autofocus) {
            var /** @type {?} */ el = this.el.nativeElement;
            if (el.focus) {
                el.focus();
            }
            else {
                console.warn('AutofocusDirective: There is no .focus() method on the element:', this.el.nativeElement);
            }
        }
    };
    Object.defineProperty(AutofocusDirective.prototype, "autofocus", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._autofocus = value !== false
                && value !== null
                && value !== undefined
                && value !== 0
                && value !== 'false'
                && value !== 'null'
                && value !== 'undefined'
                && value !== '0';
        },
        enumerable: true,
        configurable: true
    });
    return AutofocusDirective;
}());
AutofocusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[autofocus]'
            },] },
];
/**
 * @nocollapse
 */
AutofocusDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
AutofocusDirective.propDecorators = {
    'autofocus': [{ type: Input },],
};

var AutofocusModule = (function () {
    function AutofocusModule() {
    }
    /**
     * @return {?}
     */
    AutofocusModule.forRoot = function () {
        return {
            ngModule: AutofocusModule,
        };
    };
    return AutofocusModule;
}());
AutofocusModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    AutofocusDirective,
                ],
                exports: [
                    AutofocusDirective,
                ],
            },] },
];
/**
 * @nocollapse
 */
AutofocusModule.ctorParameters = function () { return []; };

export { AutofocusModule, AutofocusDirective };
